package maestro.cli.command

import maestro.cli.driver.DriverBuildConfig
import maestro.cli.driver.DriverBuilder
import maestro.cli.driver.Spinner
import maestro.cli.util.PrintUtils.message
import picocli.CommandLine
import java.util.concurrent.Callable

@CommandLine.Command(
    name = "driver-setup",
    description = [
        "Setup maestro drivers on your devices. Right now works for real iOS devices"
    ]
)
class DriverCommand : Callable<Int> {

    @CommandLine.Option(
        names = ["--team-id"],
        description = ["The Team ID is a unique 10-character string generated by Apple that is assigned to your team's apple account."]
    )
    private var teamId: String? = null

    @CommandLine.Option(
        names = ["--destination"],
        description = ["Destination device to build the driver for. Defaults to generic/platform=iphoneos if not specified."]
    )
    private var destination: String? = null


    override fun call(): Int {
        val teamId = requireNotNull(teamId) { "Team ID must be specified." }

        val destination = destination ?: "generic/platform=iphoneos"
        val spinner = Spinner("Building iOS driver for $destination...").apply {
            start()
        }

        DriverBuilder()
            .buildDriver(
                DriverBuildConfig(
                    teamId = teamId,
                    derivedDataPath = "driver-iphoneos",
                    destination = destination,
                    sourceCodePath = "driver/ios"
                )
            )

        spinner.stop()
        message("âœ… Drivers successfully set up for destination $destination")
        return 0
    }
}